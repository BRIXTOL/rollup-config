import alias from '@rollup/plugin-alias';
import beep from '@rollup/plugin-beep';
import commonjs from '@rollup/plugin-commonjs';
import html from '@rollup/plugin-html';
import json from '@rollup/plugin-json';
import multi from '@rollup/plugin-multi-entry';
import polyfills from 'rollup-plugin-node-polyfills';
import postcss from 'rollup-plugin-postcss';
import resolve from '@rollup/plugin-node-resolve';
import replace from '@rollup/plugin-replace';
import ts from '@rollup/plugin-typescript';
import tspaths from 'rollup-plugin-ts-paths';
import scss from 'rollup-plugin-scss';
import livereload from 'rollup-plugin-livereload';
import copy from 'rollup-plugin-copy';
import del from 'rollup-plugin-delete';
import { terser } from 'rollup-plugin-terser';
export { defineConfig as rollup } from 'rollup';
export { config, env, banner, jsonmin } from '@brixtol/rollup-utils';
export declare const plugin: {
    readonly alias: typeof alias;
    readonly beep: typeof beep;
    readonly copy: typeof copy;
    readonly commonjs: typeof commonjs;
    readonly del: typeof del;
    readonly filesize: (options?: import("rollup-plugin-filesize").FileSizePluginOptions) => import("rollup").Plugin;
    readonly html: typeof html;
    readonly json: typeof json;
    readonly livereload: typeof livereload;
    readonly multi: typeof multi;
    readonly polyfills: typeof polyfills;
    readonly postcss: typeof postcss;
    readonly resolve: typeof resolve;
    readonly replace: typeof replace;
    readonly scss: typeof scss;
    readonly serve: any;
    readonly terser: typeof terser;
    readonly ts: typeof ts;
    readonly tspaths: typeof tspaths;
};
//# sourceMappingURL=index.d.ts.map